#!/usr/bin/env python

from Bio import SeqIO
import md5
import argparse

# Relable fasta headers to increasing integers,
# and save table mapping new header to old header.
#
# Table can be used with Newick-Utils `nw_renable` to
# re-apply the old header to a phylogenetic tree after
# running all of those phylogenetic tools that make terrible
# assumptions about fasta headers.

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('--fasta-file', default='/dev/stdin')
    parser.add_argument('--output', default='/dev/stdout')
    parser.add_argument('--table', default=False)

    return parser.parse_args()

def get_new_id(s):
    # NCBI header, get genus and species name.
    if s.startswith('gi'): # NCBI
        s = '_'.join(s.split()[1:3])
    elif s.startswith('gg'): # GreenGenes
        s = '_'.join(s.split()[1].split('_')[0:3])
    elif s.startswith('S'): # RDP
        s = '_'.join(s.split()[1:3])
    else:
        s = 'sequence'
    return s


def main():
    args = parse_args()

    output = open(args.output, 'w')

    ids = set()

    if args.table:
        table = open(args.table, 'w')

    with open(args.fasta_file) as handle:
        records = SeqIO.parse(handle, 'fasta')

        for i, record in enumerate(records):

            old_id, old_description = record.id, record.description

            new_id = '%s_%s' % (get_new_id(record.description), i)

            record.id = str(i)
            record.description = ''

            print >> output, record.format('fasta')

            if args.table:
                print >> table, 'n%s\t%s' % (str(i), new_id)

    if args.table:
        table.close()

    output.close()


if __name__ == '__main__':
    main()
